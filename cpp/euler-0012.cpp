// The sequence of triangle numbers is generated by adding the natural numbers. 
// the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
// The first ten terms are: 1,3,6,10,15,21,28,36,45,55
// Let us list the factors of the first seven triangle numbers: 
// 1: 1
// 3: 1, 3
// 6: 1. 2, 3, 6
// 10: 1, 2, 5, 10
// 15: 1, 3, 5, 15
// 21: 1, 3, 7, 21
// 28: 1, 2, 4, 7, 14, 28 
// We can see that 28 is the first triangle number to have over five divisors 
// what is the value of the first triangle number to have over 500 divisors?

#include <iostream>
#include <vector>
#include <cmath>

long getTriangleNumber(int n) {
  long sum = 0; 
  for (int i = 0; i <= n; ++i)
    sum += i; 

  return sum; 
}

int numDivisors(int n) {
  std::vector<int> divisors {}; 

  for (int i = 0; i <= sqrt(n); i++) {
    if (n % i == 0) {
      divisors.push_back(i); 
    }
  }
  int nDivisors = divisors.size(); 
  return nDivisors; 
}

int main() {
  for (int i = 1; ; ++i) {
    int triangleNum = getTriangleNumber(i); 
    int divisors = numDivisors(triangleNum); 
    if (divisors == 500) { 
      std::cout << i << " " << triangleNum << " " << divisors << std::endl; 
      return 1; 
    }
  }
  return 0; 
}
